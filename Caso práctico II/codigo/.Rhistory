samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
normals_distributions = rnorm(samples, mu, sigma)
normals_distributions = rnorm(samples, mu, sigma)
normals_distributions
normals_distributions = array()
samples(1)
samples[1]
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacío para guardar cada muestra
samples = array()
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(numnum_samples)){
samples[1] = rnorm(num_samples[i], mu, sigma)
}
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacío para guardar cada muestra
samples = array()
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(num_samples)){
samples[1] = rnorm(num_samples[i], mu, sigma)
}
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacío para guardar cada muestra
samples = array()
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(num_samples)){
samples[i] = rnorm(num_samples[i], mu, sigma)
}
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacíode tamaño del array `num_samples` para guardar cada muestra
samples = vector(,length(num_samples))
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(num_samples)){
samples[i] = rnorm(num_samples[i], mu, sigma)
}
a = rnorm(10,1,0)
?"vector"
samples = vector(,length(num_samples))
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacíode tamaño del array `num_samples` para guardar cada muestra
samples = vector(mode = "numeric",length(num_samples))
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(num_samples)){
samples[i] = rnorm(num_samples[i], mu, sigma)
}
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacíode tamaño del array `num_samples` para guardar cada muestra
samples = vector(mode = "any",length(num_samples))
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(num_samples)){
samples[i] = rnorm(num_samples[i], mu, sigma)
}
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Creamos un array vacíode tamaño del array `num_samples` para guardar cada muestra
samples = vector(mode = "complex",length(num_samples))
# Guardamos las muestras de cada distrubuión generada
for(i in 1:length(num_samples)){
samples[i] = rnorm(num_samples[i], mu, sigma)
}
?list
?sapply
?apply
sapply(numsamples, rnorm(numsamples, mu, sigma))
sapply(num_samples, rnorm(num_samples, mu, sigma))
sapply(num_samples, rnorm
)
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Guardamos las muestras de cada distrubución generada
samples_10 = rnorm(num_samples[1], mu, sigma)
samples_100 = rnorm(num_samples[2], mu, sigma)
samples_10000 = rnorm(num_samples[3], mu, sigma)
# Construimos los histogramas
par(mfrow = c(1,3))
hist(samples_10)
hist(samples_100)
hist(samples_10000)
summary(samples_10)
summary(samples_100)
summary(samples_10000)
require(moments)
# Si no está disponible lo instalamos
if(!require("moments")) { install.packages("moments") }
source('~/GitHub/SM/Caso práctico II/codigo/caso_ii.R', encoding = 'UTF-8', echo=TRUE)
skewness(samples_10)
skewness(samples_100)
skewness(samples_10000)
##############################################################
# Cuestión 1
##############################################################
# Número de muestras
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
# Guardamos las muestras de cada distrubución generada
samples_10 = rnorm(num_samples[1], mu, sigma)
samples_100 = rnorm(num_samples[2], mu, sigma)
samples_10000 = rnorm(num_samples[3], mu, sigma)
# Construimos los histogramas
par(mfrow = c(1,3))
hist(samples_10)
hist(samples_100)
hist(samples_10000)
# Calculamos los estadísticos más relevantes
# Mínimo y máximo, primer y tercer cuartil, media y mediana
summary(samples_10)
summary(samples_100)
summary(samples_10000)
# Calculamos la desviación típica
sd(samples_10)
sd(samples_100)
sd(samples_10000)
# Calculamos la moda
# Extraído de
# http://stackoverflow.com/questions/2547402/is-there-a-built-in-function-for-finding-the-mode
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode(samples_10)
mode(samples_100)
mode(samples_10000)
# Kurtosis y asimetría (es necesario el paquete `moments`)
# Si no está disponible lo instalamos
if(!require("moments")) { install.packages("moments") }
# Cargamos el paquete
require("moments")
# Calculamos el kurtosis
kurtosis(samples_10)
kurtosis(samples_100)
kurtosis(samples_10000)
# Calculamos la asimetría
skewness(samples_10)
skewness(samples_100)
skewness(samples_10000)
?runif
n = 10000
for(i in 1:n){
unif_samples = runif(12)
x[i] = sum(unif_samples) - 6
}
x = array()
n = 10000
for(i in 1:n){
unif_samples = runif(12)
x[i] = sum(unif_samples) - 6
}
hist(x)
mean(x)
var(x)
sd(x)
sd(samples_10000)
x = sigma*x + mu
hist(x)
mean(x)
sd(x)
mean(x)
sd(x)
kurtosis(x)
skewness(x)
lambda = 9
exp_samples = array()
for(i in 1:n){
u = unif(1)
exp_samples[i] = -1/lambda * log(u)
}
lambda = 9
exp_samples = array()
for(i in 1:n){
u = runif(1)
exp_samples[i] = -1/lambda * log(u)
}
mean(exp_samples)
1/9
density(exp_samples)
plot(density(exp_samples))
hist(exp_samples)
cv = sigma(exp_samples)/mean(exp_samples)
cv = sd(exp_samples)/mean(exp_samples)
Sigma = matrix(c(7, 4, 4, 5), ncol = 2, nrow = 2)
Sigma
chol(Sigma)
chol(Sigma)%*%t(chol(Sigma))
t(chol(Sigma))%*%chol(Sigma)
L = chol(Sigma)
L
t(L)%*%L
L
t(L)
L
L = chol(Sigma)
Z = rnorm(length(Mu))
X = Mu + L%*%Z
Mu = c(3, 2)
Mu = c(3, 2)
Sigma = matrix(c(7, 4, 4, 5), ncol = 2, nrow = 2)
# Calculamos la matriz de Cholesky de la matriz de varianzas
# y covarianzas
L = chol(Sigma)
Z = rnorm(length(Mu))
X = Mu + L%*%Z
X
Mu = c(3, 2)
Sigma = matrix(c(7, 4, 4, 5), ncol = 2, nrow = 2)
# Calculamos la matriz de Cholesky de la matriz de varianzas
# y covarianzas
L = chol(Sigma)
Z = rnorm(length(Mu))
X = Mu + L%*%Z
X
L = chol(Sigma)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
}
multi_dist = array()
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[i] = X
}
multi_dist
X
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[i,1] = X[1]
multi_dist[i,2] = X[2]
}
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
multi_dist
n=10
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
multi_
multi_dist
mean(multi_dist[1,])
n=10000
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
mean(multi_dist[1,])
mean(multi_dist[1,])
mean(multi_dist[2,])
apply(multi_dist, 1, mean)
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
x = multi_dist[1,]
x = multi_dist[1,]
y = multi_dist[2,]
mean((x - mean(x))*(y-mean(y)))
mean(x*y) - mean(x)*mean(y)
x = multi_dist[1,]
y = multi_dist[2,]
mean((x - Sigma[1])*(y-Sigma[2]))
x = multi_dist[1,]
y = multi_dist[2,]
mean((x - mean(x))*(y-mean(x)))
n
apply(multi_dist, 1, mean)
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + t(L)%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
# Calculamos las medias
apply(multi_dist, 1, mean)
# Calculamos las varianzas y desviaciones típicas
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
# Calculamos las covarianzas
x = multi_dist[1,]
y = multi_dist[2,]
mean(x*y) - mean(x)*mean(y)
L = t(chol(Sigma))
# Generamos 10000 muestras de la distribución
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
apply(multi_dist, 1, mean)
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
x = multi_dist[1,]
y = multi_dist[2,]
mean(x*y) - mean(x)*mean(y)
if(!require("moments")) { install.packages("scatterplot3d") }
# Cargamos el paquete `scatterplot3d`
require("scatterplot3d")
install.packages("scatterplot3d")
if(!require("scatterplot3d")) { install.packages("scatterplot3d") }
# Cargamos el paquete `scatterplot3d`
require("scatterplot3d")
plot(x,y)
hist(x,y)
hist(multi_dist)
apply(multi_dist, 1, hist)
len<-5
N<-matrix(rnorm(len*2),len,2) # 5x2 iid N(0,1) rvs
A<-matrix(c(1,1,.5,.1),2,2)   # 2x2 matrix of coefficients
X<-N%*%A                      # 5x2 linear combination
X
cov(x,y)
bivn <- mvrnorm(5000, mu = mu, Sigma = Sigma )  # from Mass package
head(bivn)
install.packages("mvrnorm")
require("mvrnorm")
library("MASS")
bivn <- mvrnorm(5000, mu = mu, Sigma = Sigma )  # from Mass package
head(bivn)
library("MaSS")
library("Mass")
install.packages("Mass")
install.packages("mvtnorm")
bivn <- mvrnorm(5000, mu = Mu, Sigma = Sigma )
bivn
head(bivn)
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # from MASS package
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # from MASS package
image(bivn.kde)
contour(bivn.kde, add = TRUE)
library("ellipse")
install.packages("ellipse")
library("ellipse")
rho <- cor(bivn)
y_on_x <- lm(bivn[,2] ~ bivn[,1])    # Regressiion Y ~ X
x_on_y <- lm(bivn[,1] ~ bivn[,2])    # Regression X ~ Y
plot_legend <- c("99% CI green", "95% CI red","90% CI blue",
"Y on X black", "X on Y brown")
plot(bivn, xlab = "X", ylab = "Y",
col = "dark blue",
main = "Bivariate Normal with Confidence Intervals")
lines(ellipse(rho), col="red")       # ellipse() from ellipse package
lines(ellipse(rho, level = .99), col="green")
lines(ellipse(rho, level = .90), col="blue")
abline(y_on_x)
abline(x_on_y, col="brown")
legend(3,1,legend=plot_legend,cex = .5, bty = "n")
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA) # from base grap
plot(x,y)
rnorm(1)
rnorm(1)
rnorm(1)
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA) # from base grap
unif(2)
runif(2)
mvtnorm
dmvnorm
packages.install("mvtnorm")
install.package("mvtnorm")
install.packages("mvtnorm")
dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma)
require("mvtnorm")
dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma)
t(multi_dist)
dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma)
require("scatterplot3d")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
num_samples = c(10, 100, 10000)
mu = 3
sigma = 6
samples_10 = rnorm(num_samples[1], mu, sigma)
samples_100 = rnorm(num_samples[2], mu, sigma)
samples_10000 = rnorm(num_samples[3], mu, sigma)
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras", xlab = "")
hist(samples_100, main = "100 muestras", xlab = "")
hist(samples_10000, main = "10000 muestras", xlab = "")
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras", xlab = "")
hist(samples_100, main = "100 muestras", xlab = "")
hist(samples_10000, main = "10000 muestras", xlab = "")
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras")
hist(samples_100, main = "100 muestras")
hist(samples_10000, main = "10000 muestras")
hist(samples_10, main = "10 muestras")
hist(samples_10, main = "10 muestras")
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras")
hist(samples_100, main = "100 muestras")
hist(samples_10000, main = "10000 muestras")
