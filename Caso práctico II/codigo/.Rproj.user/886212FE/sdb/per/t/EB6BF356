{
    "contents" : "##############################################################\n# Cuestión 1\n##############################################################\n\n# Número de muestras\nnum_samples = c(10, 100, 10000)\n\n# Parámetros de la distribución normal\nmu = 3\nsigma = 6\n\n\n# Guardamos las muestras de cada distrubución generada \nsamples_10 = rnorm(num_samples[1], mu, sigma)\nsamples_100 = rnorm(num_samples[2], mu, sigma)\nsamples_10000 = rnorm(num_samples[3], mu, sigma)\n\n# Construimos los histogramas\npar(mfrow = c(1,3))\nhist(samples_10)\nhist(samples_100)\nhist(samples_10000)\n\n# Calculamos los estadísticos más relevantes\n\n# Mínimo y máximo, primer y tercer cuartil, media y mediana\nsummary(samples_10)\nsummary(samples_100)\nsummary(samples_10000)\n\n# Calculamos la desviación típica\nsd(samples_10)\nsd(samples_100)\nsd(samples_10000)\n\n# Calculamos la moda\n# Extraído de \n# http://stackoverflow.com/questions/2547402/is-there-a-built-in-function-for-finding-the-mode\nmode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\nmode(samples_10)\nmode(samples_100)\nmode(samples_10000)\n\n# Kurtosis y asimetría (es necesario el paquete `moments`)\n\n# Si no está disponible lo instalamos\nif(!require(\"moments\")) { install.packages(\"moments\") }\n\n# Cargamos el paquete \nrequire(\"moments\")\n\n# Calculamos el kurtosis\nkurtosis(samples_10)\nkurtosis(samples_100)\nkurtosis(samples_10000)\n\n# Calculamos la asimetría\nskewness(samples_10)\nskewness(samples_100)\nskewness(samples_10000)\n\n##############################################################\n# Cuestión 2\n##############################################################\n\n# Usamos el método de suma de 12 uniformes para generar \n# 10000 muestras de una normal (0,1)\nx = array()\nn = 10000\nfor(i in 1:n){\n  unif_samples = runif(12)\n  x[i] = sum(unif_samples) - 6\n}\n\n# Desplazamos la distribución generada para que tenga media 3\n# y desviación típica 6\nx = sigma*x + mu\n\nmean(x)\nsd(x)\nkurtosis(x)\nskewness(x)\n\n# Generamos 10000 muestras de con la función `rnorm`  \nx1 = rnorm(n, mu, sigma)\n\n##############################################################\n# Cuestión 3\n##############################################################\n\n# Generamos 10000 muestras de una distribución exponencial\n# de parámetro lambda = 9\n\nlambda = 9\n\nexp_samples = array()\nfor(i in 1:n){\n  u = runif(1)\n  exp_samples[i] = -1/lambda * log(u)\n}\n\n# Dibujamos el histograma de la muestra generada\nhist(exp_samples)\n\n# Calculamos el coeficiente de variación\ncv = sd(exp_samples)/mean(exp_samples)\n\n\n##############################################################\n# Cuestión 4\n##############################################################\n\n# Usando rnorm generamos una distribución normal bivariante\n\n# Parámetros de la función bivariante\nMu = c(3, 2)\n\nSigma = matrix(c(7, 4, 4, 5), ncol = 2, nrow = 2)\n\n# Calculamos la matriz de Cholesky de la matriz de varianzas\n# y covarianzas\nL = t(chol(Sigma))\n\n# Generamos 10000 muestras de la distribución\nmulti_dist = matrix(nrow = 2, ncol = n)\nfor(i in 1:n){\n  Z = rnorm(length(Mu))\n  X = Mu + L%*%Z\n  multi_dist[1,i] = X[1]\n  multi_dist[2,i] = X[2]\n}\n\n# Calculamos las medias\napply(multi_dist, 1, mean)\n\n# Calculamos las varianzas y desviaciones típicas\napply(multi_dist, 1, var)\napply(multi_dist, 1, sd)\n\n# Calculamos las covarianzas\nx = multi_dist[1,]\ny = multi_dist[2,]\n\ncov(x,y)\n\n\n# Representamos el scatterplot\n\n# Si no está el paquete `scatterplot3d`, lo instalamos\nif(!require(\"scatterplot3d\")) { install.packages(\"scatterplot3d\") }\n\n# Cargamos el paquete `scatterplot3d`\nrequire(\"scatterplot3d\")\n\n\n",
    "created" : 1461404362837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2897968761",
    "id" : "EB6BF356",
    "lastKnownWriteTime" : 1461414017,
    "path" : "~/GitHub/SM/Caso práctico II/codigo/caso_ii.R",
    "project_path" : "caso_ii.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}