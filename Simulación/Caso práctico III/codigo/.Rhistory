n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
n[i] = min_i
if(is.integer(min) && length(min) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
cat("Llega hasta")
n[i] = min_i
if(is.integer(min) && length(min) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
n[i] = min_i
if(is.integer(min) && length(min) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
cat("Llega hasta")
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
n[i] = min_i
if(is.integer(min) && length(min) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
cat("min_i", min_i)
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
n[i] = min_i
cat("min_i", min_i)
if(is.integer(min) && length(min) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
cat("min_i", min_i)
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
cat("min_i", min_i)
n[i] = min_i
if(is.integer(min_i) && length(min_i) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
cat("min_i", min_i)
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
n[i] = min_i
if(is.integer(min_i) && length(min_i) == 0L){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
cat("min_i", min_i)
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
n[i] = min_i
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
cat("min_i")
print(n)
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = min_i
}
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
##############################################################
# Cuestión 1
##############################################################
# Generamos una simulación del coste
generateCost =  function(){
# Asiganamos los parámetros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
##############################################################
# Cuestión 2
##############################################################
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = min_i
}
cat("n_i", n[i])
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
qnorm(1-0.005/2)
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
2*2.8*5.22/0.1
(2*2.8*5.22/0.1)^2
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
estimateSampleVariance()
qnorm(1-0.005/2)
qnorm(1-0.005/2)*2*5.22/0.1
(qnorm(1-0.005/2)*2*5.22/0.1)^2
n
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
min_i
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = min_i
}
(2*2.8*8.2/0.1)^2
(2*qnorm(1-0.005/2)*8.2/0.1)^2
(2*qnorm(1-0.005/2)*8.22/0.1)^2
(2*qnorm(1-0.005/2)*8.2/0.1)^2
(2*qnorm(1-0.005/2)*8.27/0.1)^2
(2*qnorm(1-0.005/2)*8.26/0.1)^2
2*qnorm(1-0.005/2)*8.26
2*qnorm(1-0.005/2)*8.26/0.1
2*qnorm(1-0.005/2)*8.26/sqrt(216225)
