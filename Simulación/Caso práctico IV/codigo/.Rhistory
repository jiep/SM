# Calculamos el coeficiente de variación
cv = sd(exp_samples)/mean(exp_samples)
cv
hist(exp_samples, main="10000 muestras de una distribución exponencial" xlab="", ylab = "Frecuencia", col = "blue")
hist(exp_samples, main="10000 muestras de una distribución exponencial", xlab="", ylab = "Frecuencia", col = "blue")
mean(exp_samples)
1/9
Mu = c(3, 2)
Sigma = matrix(c(7, 4, 4, 5), ncol = 2, nrow = 2)
L = t(chol(Sigma))
L
L %*% t(L)
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
apply(multi_dist, 1, mean)
# Calculamos las varianzas y desviaciones típicas
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
# Calculamos las covarianzas
x = multi_dist[1,]
y = multi_dist[2,]
cov(x,y)
# Si no está el paquete `scatterplot3d`, lo instalamos
if(!require("scatterplot3d")) { install.packages("scatterplot3d") }
# Cargamos el paquete `scatterplot3d`
require("scatterplot3d")
plot(x,y)
plot(x,y, main = "10000 muestras de una distribución normal bivariante")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
??mvnnorm
require("MASS")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
if(!require("mvtnorm")) { install.packages("mvtnorm") }
require("mvtnorm")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
pi
exp(0)
cdf =  function(Mu, Sigma, x){
const = 1/(2*pi*det(Sigma)^(1/2))
return const*exp(-1/2*t(x-Mu)*inv(Sigma)*(x-Mu))
}
det(Sigma)
det(Sigma)^(1/2)
1/(2*pi*det(Sigma)^(1/2))
t(x-Mu)
inv(Sigma)
solve(Sigma)
cdf = function(Mu, Sigma, x){
const = 1/(2*pi*det(Sigma)^(1/2))
return const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu))
}
cdf = function(Mu, Sigma, x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
multi_dist
head(multi_dist)
t(multi_dist)
z = cdf(Mu, Sigma, t(multi_dist))
cdf = function(Mu, Sigma, x){
cat(x)
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
z = cdf(Mu, Sigma, t(multi_dist))
x = c(3,2)
z = cdf(Mu, Sigma, x)
1/(2*pi*det(Sigma)^(1/2))
solve(Sigma)
x-Mu
t(x-Mu)%*%solve(Sigma)%*%(x-Mu)
exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu))
cdf = function(Mu, Sigma, x){
cat(x)
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
z = cdf(Mu, Sigma, x)
z
apply(multi_dist, 1, cdf)
cdf = function(Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
apply(t(multi_dist), 1, cdf)
apply(t(multi_dist), 1, cdf, Sigma = Sigma, Mu = Mu)
apply(t(multi_dist), 1, function(Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
})
apply(t(multi_dist), 1, function(x,Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
})
apply(t(multi_dist), 1, function(x, Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}, Sigma = Sigma, Mu = Mu)
apply(t(multi_dist), 1, function(x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
})
cdf = function(x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
x
x
cdf = function(x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
x
apply(t(multi_dist), 1, cdf)
z = apply(t(multi_dist), 1, cdf)
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma))
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma)
x = multi_dist[1,]
y = multi_dist[2,]
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z)
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma))
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z)
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z)
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, color = "blue",
angle = 55, scale.y = 0.7, pch = 16, main = "Adding elements")
scatterplot3d(x, y, z, color = "blue",
angle = 55, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante")
scatterplot3d(x, y, z, color = "blue",
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante")
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, color = "blue",
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma),
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma),
color = "blue",
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
colors <- rev(heat.colors(101))
zcolor <- colors[(z - min(z))/diff(range(z))*100 + 1]
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
?rev
colors = rev(heat.colors(101))
colors = heat.colors(101)
zcolor <- colors[(z - min(z))/diff(range(z))*100 + 1]
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
colors = heat.colors(101)
zcolor = colors[(z - min(z))/diff(range(z))*100 + 1]
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
plot(x,y, main = "10000 muestras de una distribución normal bivariante")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma),
color = zcolor,
angle = 55, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
RNGkind
RNGversion
.Random.seed
f<-function(x) x^2 * cos(x)
mean(f(runif(100000,0,pi/2)))*(pi/2)
generateCost =  function(){ f<-function(x) x^2 * cos(x) return(mean(f(runif(100000,0,pi/2)))*(pi/2)) }
generateCost =  function(){ f<-function(x) x^2 * cos(x) return(mean(f(runif(100000,0,pi/2)))*(pi/2)) }
generateCost =  function(){ f<-function(x) x^2 * cos(x)
return(mean(f(runif(100000,0,pi/2)))*(pi/2))
}
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = n[min_i]
}
cat("n_i", n[i])
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
a=estimateSampleVariance()
a
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
cat("S_i", S[i])
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = n[min_i]
}
cat("n_i", n[i])
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
a=estimateSampleVariance()
for(j in 1:n[1]){
X[j] = generateCost()
}
n[i]
n[i]=30
for(j in 1:n[1]){
X[j] = generateCost()
}
n[1]=30
for(j in 1:n[1]){
X[j] = generateCost()
}
var(X)
2*var(X)*1.96/10
(2*var(X)*1.96/10)^2
generateCost =  function(){
# Asiganamos los par?metros
mu = 9
sigma = 1
lambda_3 = 1/8
lambda_4 = 1/16
# Simulamos cada variables aleatoria del coste
C1 = rnorm(1, mean = mu, sd = sigma)
lambda_2 = 5*C1
C2 = rpois(1, lambda = lambda_2)
C3 = rexp(1, rate = lambda_3)
C4 = rexp(1, rate = lambda_4)
# Calculamos el coste total
C = C1*C2 + C3*C4
return(C)
}
for(j in 1:30){
X[j] = generateCost()
}
X
X = array()
for(j in 1:30){
X[j] = generateCost()
}
X
var(X)
for(j in 1:30){
X[j] = generateCost()
}
for(j in 1:30){
X[j] = generateCost()
}
var(X)
for(j in 1:30){
X[j] = generateCost()
}
X
var(X)
for(j in 1:30){
X[j] = generateCost()
}
var(X)
for(j in 1:1000){
X[j] = generateCost()
}
var(X)
for(j in 1:100000){
X[j] = generateCost()
}
X
var(X)
for(j in 1:1000000){
X[j] = generateCost()
}
min = 1000000
Y = array()
for(i in 1:10000){
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = vax(X)
Y = X
}
}
min = 1000000
Y = array()
for(i in 1:10000){
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
min = 1000000
Y = array()
for(i in 1:10000){
cat("Iteración ", i)
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
min = 1000000
Y = array()
for(i in 1:10000){
cat("Iteración ", i, "\n")
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
Y
min
Y = array()
Y = array()
for(i in 1:10000){
cat("Iteración ", i, "\n")
cat("Min", min, "\n")
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
min = 1000000
Y = array()
for(i in 1:10000){
cat("Iteración ", i, "\n")
cat("Min", min, "\n")
X = array()
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
mean(Y)
min = 1000000
Y = array()
for(i in 1:1000){
cat("Iteración ", i, "\n")
cat("Min", min, "\n")
X = array()
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
X = array()
for(j in 1:30){
X[j] = generateCost()
}
var(X)
Y = array()
for(i in 1:100){
cat("Iteración ", i, "\n")
cat("Min", min, "\n")
X = array()
for(j in 1:30){
X[j] = generateCost()
}
if(var(X) < min){
min = var(X)
Y = X
}
}
min = 1000000
Y = array()
for(i in 1:100){
cat("Iteración ", i, "\n")
X = array()
for(j in 1:30){
X[j] = generateCost()
}
cat("Var", var(X), "\n")
if(var(X) < min){
min = var(X)
Y = X
}
}
X = array()
for(j in 1:100000){
cat("Iteración: ", j)
X[j] = generateCost()
}
X = array()
for(j in 1:100000){
cat("Iteración: ", j, "\n")
X[j] = generateCost()
}
length(X)
var(X)
X = array()
for(j in 1:1000000){
cat("Iteración: ", j, "\n")
X[j] = generateCost()
}
var(X)
mean(X)
mean(X[1:10000])
hist(X)
var(X[1:10000])
mean(sample(X, 100000))
var(sample(X, 100000))
hist(X, col="blue")
hist(X, col="blue", ylab ="")
hist(X, col="blue", ylab ="", axes=FALSE)
Axis(side=1)
Axis(side=2, labels = FALSE)
hist(X, col="blue", ylab ="", axes=FALSE)
Axis(side=1)
library("lattice")
xyplot(X, col="blue")
xyplot(X)
hist(X, col="blue", main = "Histograma de X")
hist(X, col="blue", ylab ="", main = "Histograma de X", axes=FALSE)
Axis(side=1)
mean(X)
skewness
skewness()
library("momemts")
library("moments")
skewness(X)
summary(X)
