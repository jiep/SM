x = multi_dist[1,]
x = multi_dist[1,]
y = multi_dist[2,]
mean((x - mean(x))*(y-mean(y)))
mean(x*y) - mean(x)*mean(y)
x = multi_dist[1,]
y = multi_dist[2,]
mean((x - Sigma[1])*(y-Sigma[2]))
x = multi_dist[1,]
y = multi_dist[2,]
mean((x - mean(x))*(y-mean(x)))
n
apply(multi_dist, 1, mean)
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + t(L)%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
# Calculamos las medias
apply(multi_dist, 1, mean)
# Calculamos las varianzas y desviaciones típicas
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
# Calculamos las covarianzas
x = multi_dist[1,]
y = multi_dist[2,]
mean(x*y) - mean(x)*mean(y)
L = t(chol(Sigma))
# Generamos 10000 muestras de la distribución
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
apply(multi_dist, 1, mean)
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
x = multi_dist[1,]
y = multi_dist[2,]
mean(x*y) - mean(x)*mean(y)
if(!require("moments")) { install.packages("scatterplot3d") }
# Cargamos el paquete `scatterplot3d`
require("scatterplot3d")
install.packages("scatterplot3d")
if(!require("scatterplot3d")) { install.packages("scatterplot3d") }
# Cargamos el paquete `scatterplot3d`
require("scatterplot3d")
plot(x,y)
hist(x,y)
hist(multi_dist)
apply(multi_dist, 1, hist)
len<-5
N<-matrix(rnorm(len*2),len,2) # 5x2 iid N(0,1) rvs
A<-matrix(c(1,1,.5,.1),2,2)   # 2x2 matrix of coefficients
X<-N%*%A                      # 5x2 linear combination
X
cov(x,y)
bivn <- mvrnorm(5000, mu = mu, Sigma = Sigma )  # from Mass package
head(bivn)
install.packages("mvrnorm")
require("mvrnorm")
library("MASS")
bivn <- mvrnorm(5000, mu = mu, Sigma = Sigma )  # from Mass package
head(bivn)
library("MaSS")
library("Mass")
install.packages("Mass")
install.packages("mvtnorm")
bivn <- mvrnorm(5000, mu = Mu, Sigma = Sigma )
bivn
head(bivn)
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # from MASS package
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # from MASS package
image(bivn.kde)
contour(bivn.kde, add = TRUE)
library("ellipse")
install.packages("ellipse")
library("ellipse")
rho <- cor(bivn)
y_on_x <- lm(bivn[,2] ~ bivn[,1])    # Regressiion Y ~ X
x_on_y <- lm(bivn[,1] ~ bivn[,2])    # Regression X ~ Y
plot_legend <- c("99% CI green", "95% CI red","90% CI blue",
"Y on X black", "X on Y brown")
plot(bivn, xlab = "X", ylab = "Y",
col = "dark blue",
main = "Bivariate Normal with Confidence Intervals")
lines(ellipse(rho), col="red")       # ellipse() from ellipse package
lines(ellipse(rho, level = .99), col="green")
lines(ellipse(rho, level = .90), col="blue")
abline(y_on_x)
abline(x_on_y, col="brown")
legend(3,1,legend=plot_legend,cex = .5, bty = "n")
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA) # from base grap
plot(x,y)
rnorm(1)
rnorm(1)
rnorm(1)
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA) # from base grap
unif(2)
runif(2)
mvtnorm
dmvnorm
packages.install("mvtnorm")
install.package("mvtnorm")
install.packages("mvtnorm")
dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma)
require("mvtnorm")
dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma)
t(multi_dist)
dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma)
require("scatterplot3d")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
num_samples = c(10, 100, 10000)
mu = 3
sigma = 6
samples_10 = rnorm(num_samples[1], mu, sigma)
samples_100 = rnorm(num_samples[2], mu, sigma)
samples_10000 = rnorm(num_samples[3], mu, sigma)
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras", xlab = "")
hist(samples_100, main = "100 muestras", xlab = "")
hist(samples_10000, main = "10000 muestras", xlab = "")
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras", xlab = "")
hist(samples_100, main = "100 muestras", xlab = "")
hist(samples_10000, main = "10000 muestras", xlab = "")
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras")
hist(samples_100, main = "100 muestras")
hist(samples_10000, main = "10000 muestras")
hist(samples_10, main = "10 muestras")
hist(samples_10, main = "10 muestras")
par(mfrow = c(1,3))
hist(samples_10, main = "10 muestras")
hist(samples_100, main = "100 muestras")
hist(samples_10000, main = "10000 muestras")
num_samples = c(10, 100, 10000)
# Parámetros de la distribución normal
mu = 3
sigma = 6
samples_10 = rnorm(num_samples[1], mu, sigma)
samples_100 = rnorm(num_samples[2], mu, sigma)
samples_10000 = rnorm(num_samples[3], mu, sigma)
if(!require("moments")) { install.packages("moments") }
require("moments")
kurtosis(samples_10)
skewness(samples_10)
x = array()
n = 10000
for(i in 1:n){
unif_samples = runif(12)
x[i] = sum(unif_samples) - 6
}
x = sigma*x + mu
mean(x)
sd(x)
kurtosis(x)
skewness(x)
summary(x)
var(x)
if(!require("modeest")) { install.packages("modeest") }
# Cargamos el paquete
require("modeest")
mlv(x, method = "mfv")
x1 = rnorm(n, mu, sigma)
# Calculamos algunos descriptivos estadísticos
summary(x1)
mean(x1)
var(x1)
sd(x1)
kurtosis(x1)
skewness(x1)
mlv(x1, method = "mfv")
par(mfrow = c(1,3))
hist(samples_10000, main = "10000 muestras\n Cuestión 1", xlab = "", "ylab" = "Frecuencia", col = "blue")
hist(x, main = "12 uniformes", xlab = "", "ylab" = "Frecuencia", col = "blue")
hist(x1, main = "10000 muestras", xlab = "", "ylab" = "Frecuencia", col = "blue")
# Restauramos la vista de los plots
par(mfrow=c(1,1))
par(mfrow = c(1,3))
hist(samples_10000, main = "10000 muestras\n Cuestión 1", xlab = "", "ylab" = "Frecuencia", col = "blue")
hist(x, main = "12 uniformes", xlab = "", "ylab" = "Frecuencia", col = "blue")
hist(x1, main = "10000 muestras", xlab = "", "ylab" = "Frecuencia", col = "blue")
# Restauramos la vista de los plots
par(mfrow=c(1,1))
lambda = 9
exp_samples = array()
for(i in 1:n){
u = runif(1)
exp_samples[i] = -1/lambda * log(u)
}
# Dibujamos el histograma de la muestra generada
hist(exp_samples)
# Calculamos el coeficiente de variación
cv = sd(exp_samples)/mean(exp_samples)
lambda = 9
exp_samples = array()
for(i in 1:n){
u = runif(1)
exp_samples[i] = -1/lambda * log(u)
}
# Dibujamos el histograma de la muestra generada
hist(exp_samples, xlab="", ylab = "Frecuencia", col = "blue")
# Calculamos el coeficiente de variación
cv = sd(exp_samples)/mean(exp_samples)
cv
lambda = 9
exp_samples = array()
for(i in 1:n){
u = runif(1)
exp_samples[i] = -1/lambda * log(u)
}
# Dibujamos el histograma de la muestra generada
hist(exp_samples, xlab="", ylab = "Frecuencia", col = "blue")
# Calculamos el coeficiente de variación
cv = sd(exp_samples)/mean(exp_samples)
cv
hist(exp_samples, main="10000 muestras de una distribución exponencial" xlab="", ylab = "Frecuencia", col = "blue")
hist(exp_samples, main="10000 muestras de una distribución exponencial", xlab="", ylab = "Frecuencia", col = "blue")
mean(exp_samples)
1/9
Mu = c(3, 2)
Sigma = matrix(c(7, 4, 4, 5), ncol = 2, nrow = 2)
L = t(chol(Sigma))
L
L %*% t(L)
multi_dist = matrix(nrow = 2, ncol = n)
for(i in 1:n){
Z = rnorm(length(Mu))
X = Mu + L%*%Z
multi_dist[1,i] = X[1]
multi_dist[2,i] = X[2]
}
apply(multi_dist, 1, mean)
# Calculamos las varianzas y desviaciones típicas
apply(multi_dist, 1, var)
apply(multi_dist, 1, sd)
# Calculamos las covarianzas
x = multi_dist[1,]
y = multi_dist[2,]
cov(x,y)
# Si no está el paquete `scatterplot3d`, lo instalamos
if(!require("scatterplot3d")) { install.packages("scatterplot3d") }
# Cargamos el paquete `scatterplot3d`
require("scatterplot3d")
plot(x,y)
plot(x,y, main = "10000 muestras de una distribución normal bivariante")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
??mvnnorm
require("MASS")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
if(!require("mvtnorm")) { install.packages("mvtnorm") }
require("mvtnorm")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
pi
exp(0)
cdf =  function(Mu, Sigma, x){
const = 1/(2*pi*det(Sigma)^(1/2))
return const*exp(-1/2*t(x-Mu)*inv(Sigma)*(x-Mu))
}
det(Sigma)
det(Sigma)^(1/2)
1/(2*pi*det(Sigma)^(1/2))
t(x-Mu)
inv(Sigma)
solve(Sigma)
cdf = function(Mu, Sigma, x){
const = 1/(2*pi*det(Sigma)^(1/2))
return const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu))
}
cdf = function(Mu, Sigma, x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
multi_dist
head(multi_dist)
t(multi_dist)
z = cdf(Mu, Sigma, t(multi_dist))
cdf = function(Mu, Sigma, x){
cat(x)
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
z = cdf(Mu, Sigma, t(multi_dist))
x = c(3,2)
z = cdf(Mu, Sigma, x)
1/(2*pi*det(Sigma)^(1/2))
solve(Sigma)
x-Mu
t(x-Mu)%*%solve(Sigma)%*%(x-Mu)
exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu))
cdf = function(Mu, Sigma, x){
cat(x)
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
z = cdf(Mu, Sigma, x)
z
apply(multi_dist, 1, cdf)
cdf = function(Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
apply(t(multi_dist), 1, cdf)
apply(t(multi_dist), 1, cdf, Sigma = Sigma, Mu = Mu)
apply(t(multi_dist), 1, function(Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
})
apply(t(multi_dist), 1, function(x,Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
})
apply(t(multi_dist), 1, function(x, Mu, Sigma){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}, Sigma = Sigma, Mu = Mu)
apply(t(multi_dist), 1, function(x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
})
cdf = function(x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
x
x
cdf = function(x){
const = 1/(2*pi*det(Sigma)^(1/2))
return (const*exp(-1/2*t(x-Mu)%*%solve(Sigma)%*%(x-Mu)))
}
x
apply(t(multi_dist), 1, cdf)
z = apply(t(multi_dist), 1, cdf)
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma))
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma)
x = multi_dist[1,]
y = multi_dist[2,]
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma))
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z)
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, mean = Mu, sigma = Sigma))
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z)
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z)
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, color = "blue",
angle = 55, scale.y = 0.7, pch = 16, main = "Adding elements")
scatterplot3d(x, y, z, color = "blue",
angle = 55, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante")
scatterplot3d(x, y, z, color = "blue",
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante")
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, color = "blue",
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma),
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma),
color = "blue",
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
colors <- rev(heat.colors(101))
zcolor <- colors[(z - min(z))/diff(range(z))*100 + 1]
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
?rev
colors = rev(heat.colors(101))
colors = heat.colors(101)
zcolor <- colors[(z - min(z))/diff(range(z))*100 + 1]
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
colors = heat.colors(101)
zcolor = colors[(z - min(z))/diff(range(z))*100 + 1]
# Función de densidad usando la función `cdf` definida anteriormente
scatterplot3d(x, y, z, color = zcolor,
angle = 70, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
plot(x,y, main = "10000 muestras de una distribución normal bivariante")
scatterplot3d(x, y, dmvnorm(t(multi_dist), mean = Mu, sigma = Sigma),
color = zcolor,
angle = 55, scale.y = 0.7, pch = 16,
main = "10000 muestras de una distribución normal bivariante",
zlab = "Densidad")
RNGkind
RNGversion
.Random.seed
f<-function(x) x^2 * cos(x)
mean(f(runif(100000,0,pi/2)))*(pi/2)
generateCost =  function(){ f<-function(x) x^2 * cos(x) return(mean(f(runif(100000,0,pi/2)))*(pi/2)) }
generateCost =  function(){ f<-function(x) x^2 * cos(x) return(mean(f(runif(100000,0,pi/2)))*(pi/2)) }
generateCost =  function(){ f<-function(x) x^2 * cos(x)
return(mean(f(runif(100000,0,pi/2)))*(pi/2))
}
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
generateCost()
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = n[min_i]
}
cat("n_i", n[i])
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
estimateSampleVariance()
a=estimateSampleVariance()
a
estimateSampleVariance =  function(alpha = 0.05, d = 10){
i = 1
n = array()
n[i] = 30
# Guardamos las muestras del coste
X = array()
for(j in 1:n[1]){
X[j] = generateCost()
}
S = array()
S[i] = var(X)
cat("S_i", S[i])
while (2*qnorm(1-alpha/2)*S/sqrt(n[i]) > d){
i = i + 1
min_i = which(n >= (2*qnorm(1-alpha/2)*S[i-1]/d)^2)
print(n)
if(is.integer(min_i) && length(min_i) == 0){
min_i = (2*qnorm(1-alpha/2)*S[i-1]/d)^2
n[i] = min_i
}else{
n[i] = n[min_i]
}
cat("n_i", n[i])
for(j in (n[i-1] +1):n[i]){
X[j] = generateCost()
}
S[i] = var(X)
}
return(n[i])
}
a=estimateSampleVariance()
for(j in 1:n[1]){
X[j] = generateCost()
}
n[i]
n[i]=30
for(j in 1:n[1]){
X[j] = generateCost()
}
n[1]=30
for(j in 1:n[1]){
X[j] = generateCost()
}
var(X)
2*var(X)*1.96/10
(2*var(X)*1.96/10)^2
