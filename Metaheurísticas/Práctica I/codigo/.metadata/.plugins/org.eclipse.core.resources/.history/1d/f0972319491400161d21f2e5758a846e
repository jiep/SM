package es.urjc.phub;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;

public class PHub {
	
	static List<InstanciaPHub> leerInstanciasDesdeDirectorio(String directorio){
		List<InstanciaPHub> instancias = new ArrayList<>();
		
		File dir = new File(directorio);
		File[] ficheros = dir.listFiles();
		
		for (int i = 0; i < ficheros.length; i++) {
			if (ficheros[i].isFile()) {
				instancias.add(leerInstancia(ficheros[i].getPath()));
				System.out.println("File " + ficheros[i].getPath());
			}
		    }
		
		return instancias;
	}
	
	static double[][] calcularDistancias(Vector<Double> posiciones[]){
		int n = posiciones.length; 
		double[][] distancias = new double[n][n];
		
		for(int i = 0; i < n; i++){
			for(int j=0; j<=i; j++){
				// Posiciones del nodo i
				double posicion_x_i = posiciones[i].get(0);
				double posicion_y_i = posiciones[i].get(1);
				
				// Posiciones del nodo j
				double posicion_x_j = posiciones[j].get(0);
				double posicion_y_j = posiciones[j].get(1);
				
				System.out.println("i=" + i + ": (" + posicion_x_i + "," + posicion_y_i + ")");
				System.out.println("j=" + j + ": (" + posicion_x_j + "," + posicion_y_j + ")");

				double distancia = Math.sqrt((posicion_x_i - posicion_x_j)*(posicion_x_i - posicion_x_j) + (posicion_y_i - posicion_y_j)*(posicion_y_i - posicion_y_j));
				//double distancia = Math.sqrt(Math.pow(posicion_x_i - posicion_x_j, 2) - Math.pow(posicion_y_i - posicion_y_j, 2));
				System.out.println("Distancia:" + distancia);
				distancias[i][j] = distancia;
				distancias[j][i] = distancia;
			}
		}
		
		return distancias;
	}
	
	static InstanciaPHub leerInstancia(String filepath){
		
		int nodos = 0;
		int servidores = 0;
		int capacidad = 0;
		
		double[] demanda = null;
		Vector<Double>[] posiciones = null;
		
		try{
            Scanner scanner = new Scanner(new File(filepath));
            
            /*
             * Leemos la primera línea
             */
            String linea1 = scanner.nextLine(); 
                        
            String datos[] = linea1.split(" ");

            /*
             *  Comenzamos a leer los datos desde el elemento 1, puesto que
             *  cada línea comienza con un espacio
             */
            nodos = Integer.parseInt(datos[1]);
            servidores = Integer.parseInt(datos[2]);
            capacidad = Integer.parseInt(datos[3]);
            
            /*
             * Creamos el vector de demanda
             */
            demanda = new double[nodos];
            
            /*
             * Matriz de vectores para guardar la 
             * posición (x,y) de cada nodo
             */
            posiciones = new Vector[nodos];
            
            for(int i = 0; i < nodos; i++){
            	
            	 Vector<Double> posicion = new Vector<>(2);
            	 
            	 // Número de nodo
            	 int num_nodo = scanner.nextInt();
            	 // Posición (x,y) del nodo
            	 double pos_x = scanner.nextDouble();
            	 double pos_y = scanner.nextDouble();
            	 
            	 // Añadimos posición al vector
                 posicion.add(pos_x);
                 posicion.add(pos_y);
                 posiciones[i] = posicion;
                 
                 // Añadimos demanda al vector
                 demanda[i] = scanner.nextInt();
            }
            scanner.close();
        }catch(IOException e){
        	System.out.println("No se pudo leer el archivo correctamente.");
        }
		double[][] distancia = calcularDistancias(posiciones);
		return new InstanciaPHub(nodos, servidores, distancia, demanda, capacidad);

	}
	
	
	

	public static void main(String[] args) {
		Vector<Double> v1 = new Vector();
		v1.add(new Double(1));
		v1.add(new Double(0));
		
		Vector<Double> v2 = new Vector();
		v2.add(new Double(2));
		v2.add(new Double(3));
		
		Vector<Double> v3 = new Vector();
		v3.add(new Double(1));
		v3.add(new Double(7));
		
		Vector<Double> v4 = new Vector();
		v4.add(new Double(2));
		v4.add(new Double(4));
		
		Vector<Double> posiciones[] = new Vector[4];
		
		posiciones[0] = v1;
		posiciones[1] = v2;
		posiciones[2] = v3;
		posiciones[3] = v4;

		double[][] distancias = calcularDistancias(posiciones);
		
		for (int i = 0; i < distancias.length; i++) {
		    for (int j = 0; j < distancias[0].length; j++) {
		        System.out.print(distancias[i][j] + " ");
		    }
		    System.out.print("\n");
		}
		
		//leerInstancia("instancias/phub_50_5_1.txt");
	}

}
